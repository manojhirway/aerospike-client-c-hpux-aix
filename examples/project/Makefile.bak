###############################################################################
##  SETTINGS                                                                 ##
###############################################################################

AS_HOST := 127.0.0.1
AS_PORT := 3000
AS_ARGS := -h $(AS_HOST) -p $(AS_PORT)

OS = $(shell uname)

ifeq ($(OS),AIX)
ARCH = $(shell uname -p)
else
ARCH = $(shell uname -m)
endif

PLATFORM = $(OS)-$(ARCH)


CFLAGS = 

ifeq ($(OS),HP-UX)
CFLAGS += -std=gnu99 -g -fPIC -O$(O)
CFLAGS += -DMARCH_$(ARCH) -mbig-endian -mlp64
else ifeq ($(OS),AIX)
CFLAGS += -DMARCH_$(ARCH) -D__PPC__ -maix64
CFLAGS += -std=gnu99 -g -fPIC -O$(O)
else
CFLAGS += -Wall -fPIC -march=nocona -DMARCH_$(ARCH) -rdynamic
endif

CFLAGS += -fno-common -fno-strict-aliasing -D_REENTRANT -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64
CFLAGS += -fno-common -fno-strict-aliasing -finline-functions
CFLAGS += -D_FILE_OFFSET_BITS=64 -D_REENTRANT
CFLAGS += -O$(O) -D_GNU_SOURCE $(EXT_CFLAGS)

ifeq ($(OS),Darwin)
  CFLAGS += -D_DARWIN_UNLIMITED_SELECT
endif

CFLAGS += -I$(AEROSPIKE)/target/$(PLATFORM)/include
CFLAGS += -I../../utils/src/include

LDFLAGS += -lssl -lcrypto -lpthread

ifneq ($(OS),Darwin)
  LDFLAGS += -lrt -ldl
endif

ifeq ($(OS),AIX)
  LDFLAGS += -maix64 -lrt -llua -laerospike
else ifeq ($(OS),HP-UX) 
  LDFLAGS += -mlp64
endif


# Use the Lua submodule?  [By default, yes.]
USE_LUAMOD = 1

# Use LuaJIT instead of Lua?  [By default, no.]
USE_LUAJIT = 0

# Permit easy overriding of the default.
ifeq ($(USE_LUAJIT),1)
  USE_LUAMOD = 0
endif

ifeq ($(and $(USE_LUAMOD:0=),$(USE_LUAJIT:0=)),1)
  $(error Only at most one of USE_LUAMOD or USE_LUAJIT may be enabled (i.e., set to 1.))
endif

ifeq ($(USE_LUAJIT),1)
  ifeq ($(OS),Darwin)
    LDFLAGS += -pagezero_size 10000 -image_base 100000000
  endif
else
  ifeq ($(USE_LUAMOD),0)
    # Find where the Lua development package is installed in the build environment.
    ifeq ($(OS),Darwin)
      LUA_LIBPATH = $(or \
	$(wildcard /usr/local/lib/liblua.5.1.dylib), \
	$(wildcard /usr/local/lib/liblua.5.1.a), \
	$(wildcard /usr/local/lib/liblua.dylib), \
	$(wildcard /usr/local/lib/liblua.a), \
	  $(error Cannot find liblua 5.1))
      LUA_LIBDIR = $(dir $(LUA_LIBPATH))
      LUA_LIB = $(patsubst lib%,%,$(basename $(notdir $(LUA_LIBPATH))))
else ifeq ($(OS),HP-UX)
	LUA_LIBPATH += $(or \
    $(wildcard /usr/local/lib/liblua.5.1.dylib), \
    $(wildcard /usr/local/lib/liblua.5.1.a), \
    $(wildcard /usr/local/lib/liblua.dylib), \
    $(wildcard /usr/local/lib/liblua.a), \
	$(error Cannot find liblua 5.1) \
    )
LUA_LIBDIR = $(dir LUA_LIBPATH)
LUA_LIB = $(patsubst lib%,%,$(basename $(notdir $(LUA_LIBPATH))))
else ifeq ($(OS),AIX)
	LUA_LIBPATH += /usr/local/lib
	LUA_LIBPATH += /usr/lib
	LUA_LIBDIR = $(dir $(LUA_LIBPATH))
else
      # Linux
      LUA_LIBPATH = $(or \
	$(wildcard /usr/lib/liblua5.1.so), \
	$(wildcard /usr/lib/liblua5.1.a), \
	$(wildcard /usr/lib/x86_64-linux-gnu/liblua5.1.so), \
	$(wildcard /usr/lib/x86_64-linux-gnu/liblua5.1.a), \
	$(wildcard /usr/lib64/liblua-5.1.so), \
	$(wildcard /usr/lib64/liblua-5.1.a), \
	$(wildcard /usr/lib/liblua.so), \
	$(wildcard /usr/lib/liblua.a), \
	  $(error Cannot find liblua 5.1))
      LUA_LIBDIR = $(dir $(LUA_LIBPATH))
      LUA_LIB = $(patsubst lib%,%,$(basename $(notdir $(LUA_LIBPATH))))
    endif
  #LDFLAGS += -L$(LUA_LIBDIR) -l$(LUA_LIB)
  endif
endif

LDFLAGS += -lm
ifeq ($(OS),HP-UX)
LUA_LIB = lua
LDFLAGS += -l$(LUA_LIB)  
#LDFLAGS += -L/usr/lib/liblua5.1.a
else ifeq ($(OS),HP-UX)
LUA_LIB = lua
LDFLAGS += -l$(LUA_LIB)
endif

ifeq ($(OS),Darwin)
  CC = clang
else
  CC = gcc
endif

###############################################################################
##  OBJECTS                                                                  ##
###############################################################################

OBJECTS = example.o example_utils.o

###############################################################################
##  MAIN TARGETS                                                             ##
###############################################################################

all: build

.PHONY: build
build: target/example

.PHONY: clean
clean:
	@rm -rf target

target:
	mkdir $@

target/obj: | target
	mkdir $@

target/obj/example_utils.o: ../../utils/src/main/example_utils.c | target/obj
	$(CC) $(CFLAGS) -o $@ -c $^

target/obj/%.o: src/main/%.c | target/obj
	$(CC) $(CFLAGS) -o $@ -c $^

target/example: $(addprefix target/obj/,$(OBJECTS)) | target
#	$(CC) -o $@ $^ $(AEROSPIKE)/target/$(PLATFORM)/lib/libaerospike.a $(LDFLAGS)
ifeq ($(OS),HP-UX)
	$(CC) $(LDFLAGS) -laerospike -l$(LUA_LIB) -o $@ $^
else
	$(CC) $(LDFLAGS) -L$(LUA_LIBPATH) -L$(AEROSPIKE)/target/$(PLATFORM)/lib/libaerospike.a -o $@ $^
endif

.PHONY: run
run: build
	./target/example $(AS_ARGS)

.PHONY: valgrind
valgrind: build
	valgrind --tool=memcheck --leak-check=yes --show-reachable=yes --num-callers=20 --track-fds=yes -v ./target/example

